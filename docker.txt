DOCKER

' C{n} ' --> Description of COMMAND
' $ '  --> The command to be used
' * '  --> Note that should be kept in mind while using the commands
' -{letter/word} ' --> flags used with commands for addional features
' ** ' --> Hints

I: Basics

C1: Displaying List of containers running
	$ docker ps -a
		-a : shows all container whether running or stopped
		** You can view the following columns by running the above
			CONTAINER ID : unique id generated by docker for each container
			IMAGE: the image used to built the container(image_tag)
			COMMAND: the command mentioned in the Dockerfile to run in the container
			CREATED: the creation time
			STATUS: the status of the container(Up, Created, Exited)
			PORTS: the port mapping of the container (host:container)
			NAMES: the container name



C2: Building a image
	$ docker build --no-cache -t <image_tag> <dockefile_path>
		-t : tags for the image being built
		--no-cache: building a the container without consuming the cache if there


C3: Starting/Running a container
	$ docker run -dp 127.0.0.1:8000:8000 <image_tag>
		-p : port mapping (host:container)
		-d : running the container in a detached mode
		** Image_tag should be same which is used while building the image

	
C4: Stopping a container
	$ docker stop <container_id>
		** You can get container_id by following C1


C5: Removing a container
	$ docker rm <container_id>
		* If a container is in running stage, you have to stop the container(C4) before removing it. 
		** You can get container_id from C1

C6: Entering access to a container
	$ docker exec -it <container_id/container_name> <command>
		-i : keeps input open to the container_id
		-t : flag creates a pseudo-terminal that the shell can attach to
		** Image_tag should be same which is used while building the image
		** Command to run in the container in not interactive way

	$ docker exec <container_id/container_name> <command>
		** Command to run in the container in not interactive way

C7: Inspecting/Viewing a container to view its configuration
	$ docker inspect <container_id>

	$ docker logs -f --tail <n> <container_name/container_id>
		--tail : follows the log file, <n> number of logs


II: VOLUME

C8: Displaying List of volumes created
	$ docker volume ls -q
		-q: displays only the name column

C9: Creating a volume
	$ docker volume create <volume_name>
		This will create an empty volume with given name

C10: Attaching a volume
	
	C10a: (HOST VOLUMES) Attaching a local directory as volume(to see changes after reloading i.e. For developing dockerized project)
		$ docker run -v ./:/app -p 127.0.0.1:8000:8000 <image_tag>
			* Stop the container before running this.
			-v : attaching as local directory as volume (host_directory:container_directory)
			-p : port mapping (host:container)
	
	C10b: (NAMED VOLUMES) Attaching it to the container
		$ docker run -v <volume_name>:<container_directory> -p <host_port>:<container_port> <image_tag>
			* Stop the container before running this
			-v : attaching as volume (volume_name:container_directory)
			-p : port mapping (host_port:container_port)
			** Image_tag should be same which is used while building the image

	* If there is a need for multiple volumes use multiple -v tags while running the commands mentioned in (C10)

C11: Removing/Deleting a volume
	$ docker volume rm <volume_name>
		* The volume will only be removes if not in use by the container
		** you can get the volume name by following (C8)

	$ docker volume prune -af
		-a : removes all the unused named volumes except the annonymus ones
		-f : does not prompt for confirmation
		** without any flag it only removes annonymus volumes

III: COMPOSE

C12: Building a compose network
	$ docker compose build --no-cache
		--no-cache : build the contains specified in the file without using cache if there
	
C13: Starting the compose network
	$ docker compose up -d --build
		-d : start the network in detached mode 
		--build : start the network after building it
		## we can also add container name mentioned in the compose file if we want to start a particular container

	
C14: Looking/Following the logs for the network 
	$ docker compose logs -f --tail 100
		-f : follow the log output
		--tail 100 : shows a particular number of logs from each container in the network 
			i.e in this case 100
		** we can also add container name if we want to see logs of a specific container

C15: Accessing the container running in the compose network
	$ docker compose exec <container_name> <command>
		** We can also access container via container tag using (C6)

C16: Stopping the whole network
	$ docker compose down
		This command stops and remove containers, networks, images, volumes, and driver data associated with it.
	
C17: Restart the compose network
	$ docker compose restart
		** we can also add container name at the end if we want to restart a particular container not the whole network

C18: Only used with postgres container for dumping and restore data into the db container
	C18a: Using pg_dump
		$ pg_dump -U postgres testing_live_db12 -p 5432 -h 172.16.2.48 > testing_12_backup.sql

		$ docker compose exec db pg_dump -U <username> -Fc <database_name> > db.sql

		$ docker compose exec db pg_dump -U <username> <database_name> | zip > ~/db.sql.zip

		$ docker compose exec db pg_dump -U <username> <database_name> | zip > ~/db.sql.gz

	C18b: Restoring using pg_restore
		$ sudo psql -U postgres -h 172.16.2.48 -d testing_soc_db6 < testing_12_backup.sql

		$ docker compose exec -T db pg_restore -Fc -d <database_name> -U <username> < db.sql 

		$  unzip -c db.sql.zip | docker-compose exec -T db psql -U <username> <database_name>
		
		$  gunzip -c db.sql.gz | docker-compose exec -T db psql -U <username> <database_name>
